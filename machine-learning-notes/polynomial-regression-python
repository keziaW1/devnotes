### POLYNOMIAL REGRESSION 

## Importing Libraries: 
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

## Importing Datasets: 

# this can be any file or set of data
dataset = pd.read_csv('Position_Salaries.csv') 
# reads every column except for the last one
X = dataset.iloc[:, :-1].values 
# reads only the last column
y = dataset.iloc[:, -1].values 

## Training Linear Regression Model:

from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(X,y)
# training a linear regression model to contrast polynomial one proving why polynomial regression is preferred for this dataset

## Training Polynomial Regression Model: 

from sklearn.preprocessing import PolynomialFeatures
# change the degree to better suit the data
poly_reg = PolynomialFeatures(degree = 4)
X_poly = poly_reg.fit_transform(X)
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly, y)

## Visualize Linear Regression: 

plt.scatter(X,y, color = 'red')
plt.plot(X, lin_reg.predict(X), color = 'blue')
plt.title('Truth or Bluff(Linear Regression)')
plt.xlabel('Position Level')
plt.ylabel('Salary')
plt.show()
# graph shows a linear regression that doesn't accurately represent the dataset

## Visualize Polynomial Regression: 

plt.scatter(X,y, color = 'red')
plt.plot(X, lin_reg_2.predict(poly_reg.fit_transform(X)), color = 'blue')
plt.title('Truth or Bluff(Polynomial Regression)')
plt.xlabel('Position Level')
plt.ylabel('Salary')
plt.show()
# this graph is more accurate but not as smooth 

## Visualize Polynomial Regression (Smooth): 

X_grid = np.arange(min(X), max(X), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))
plt.scatter(X, y, color = 'red')
plt.plot(X_grid, lin_reg_2.predict(poly_reg.fit_transform(X_grid)), color = 'blue')
plt.title('Truth or Bluff (Polynomial Regression)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()
# instead of linear lines from 1,2,3, this graph accounts for 1.1, 1.2, increasing the density 

## Prediction Linear Regression Results: 
lin_reg.predict([[6.5]])
# predicting for position 6.5

## Prediction Polynomial Regression Result: 
lin_reg_2.predict(poly_reg.fit_transform([[6.5]]))
# predicting for position 6.5
