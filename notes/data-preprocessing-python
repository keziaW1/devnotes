### DATA PREPROCESSING 

## Importing the libraries:

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

## Importing the dataset:

# this can be any file or set of data
dataset = pd.read_csv('Data.csv') 
# reads every column except for the last one
X = dataset.iloc[:, :-1].values 
# reads only the last column
y = dataset.iloc[:, -1].values 


## Taking care of missing data: 

from sklearn.impute import SimpleImputer
# using the mean value to replace missing values in the dataset
imputer = SimpleImputer(missing_values=np.nan, strategy='mean') 
# calculating replacement values for all rows and columns 1,2
imputer.fit(X[:, 1:3])
# replace missing data
X[:, 1:3] = imputer.transform(X[:, 1:3])

## Hot Encoding the Independent Variable: 

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
# since python, column 1 has index of 0 and hot encoding only that one column, excluding the rest
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')
# converting hot encoded code into numpy array and storing
X = np.array(ct.fit_transform(X))

## Encoding Dependent Variable Into 0 and 1: 

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)

## Splitting Dataset Into Training and Test Sets: 

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 1 )

## Feature Scaling: 

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train[:, 3:] = sc.fit_transform(X_train[:, 3:])
X_test[:, 3:] = sc.transform(X_test[:, 3:])

# *note* that not all datasets need feature scaling 